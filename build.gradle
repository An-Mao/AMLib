plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

jarJar.enable()
version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
}

base {
    archivesName = mod_id
}

configurations {
    libraries
    implementation.extendsFrom libraries
}

dependencies {
    libraries fileTree(dir: 'libs', include: ['*.jar'])
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    configureEach {
        dependencies {
            runtime project.configurations.libraries
        }
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}
dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    jarJar(group:'anmao.dev', name:'core', version:'[1.0.2,)')
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
tasks.named('jarJar') {
    // ...
}
/*
jarJar {
    // ...
    // Include or exclude dependencies here from runtime configuration
    dependencies {
        // Exclude any dependency which begins with 'com.google.gson.'
        //include(dependency('anmao.dev.*'))
    }
}

 */
// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
/*
jar {
    from('libs') {
        include '*.jar'
        into('META-INF/jarjar')
    }
}


jarJar.fromRuntimeConfiguration('libraries')
// ...

jarJar {
    // Include or exclude dependencies here from runtime configuration
    dependencies {
        // Exclude any dependency which begins with 'com.google.gson.'
        exclude(dependency('com.google.gson.*'))
    }
}

 */